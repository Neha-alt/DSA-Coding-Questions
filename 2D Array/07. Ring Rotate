//important- covers major 2d concepts
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int r = sc.nextInt();
        int c = sc.nextInt();
        int a[][] = new int[r][c];
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                a[i][j] = sc.nextInt();
            }
        }
        int s = sc.nextInt();
        int n = sc.nextInt();
        rotateShell(a, s, n);
        display(a);
    }
    public static void rotateShell(int[][] a, int s, int r) {
        int oned[] = fillOnedFromShell(a, s);
        rotate(oned, r);
        fillShellFromOned(a, oned, s);
    }
    public static int[] fillOnedFromShell(int[][] a, int s) {
        int minr = s - 1;
        int minc = s - 1;
        int maxr = a.length - s;
        int maxc = a[0].length - s;
        int sz = 2 * (maxr - minr + maxc - minc);
        int[] oned = new int[sz];
        int idx = 0;
        //lw
        for (int i = minr; i <= maxr; i++) {
            oned[idx] = a[i][minc];
            idx++;
        }
        //bw
        for (int i = minc + 1; i <= maxc; i++) {
            oned[idx] = a[maxr][i];
            idx++;
        }
        //rw
        for (int i = maxr - 1; i >= minr; i--) {
            oned[idx] = a[i][maxc];
            idx++;
        }
        //tw
        for (int i = maxc - 1; i >= minc + 1; i--) {
            oned[idx] = a[minr][i];
            idx++;
        }
        return oned;
    }
    public static void fillShellFromOned(int[][] a, int[] oned, int s) {
        int minr = s - 1;
        int minc = s - 1;
        int maxr = a.length - s;
        int maxc = a[0].length - s;
        int idx = 0;
        //lw
        for (int i = minr; i <= maxr; i++) {
            a[i][minc] = oned[idx];
            idx++;
        }
        //bw
        for (int i = minc + 1; i <= maxc; i++) {
            a[maxr][i] = oned[idx];
            idx++;
        }
        //rw
        for (int i = maxr - 1; i >= minr; i--) {
            a[i][maxc] = oned[idx];
            idx++;
        }
        //tw
        for (int i = maxc - 1; i >= minc + 1; i--) {
            a[minr][i] = oned[idx];
            idx++;
        }
    }
    public static void rotate(int[] oned, int r) {
        r = r % oned.length;
        if (r < 0)
            r += oned.length;
        reverse(oned, 0, oned.length - r - 1);
        reverse(oned, oned.length - r, oned.length - 1);
        reverse(oned, 0, oned.length - 1);
    }
    public static void reverse(int[] oned, int li, int ri) {
        while (li <= ri) {
            int temp = oned[li];
            oned[li] = oned[ri];
            oned[ri] = temp;
            li++;
            ri--;
        }
    }
    public static void display(int[][] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[0].length; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }

}
